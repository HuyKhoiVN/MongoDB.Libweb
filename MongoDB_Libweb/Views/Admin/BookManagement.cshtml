@{
    ViewData["Title"] = "Book Management";
    Layout = "~/Views/Admin/_AdminLayout.cshtml";
}

<style>
        .admin-container {
             
            margin: 0 auto;
            padding: 20px;
        }
        .filters {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .filter-row {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .filter-group {
            display: flex;
            flex-direction: column;
            min-width: 150px;
        }
        .filter-group label {
            font-weight: bold;
            margin-bottom: 5px;
            color: #333;
        }
        .filter-group input, .filter-group select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        .btn-primary {
            background: var(--primary-color);
            color: white;
        }
        .btn-primary:hover {
            background: #e55a00;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #5a6268;
        }
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        .btn-danger:hover {
            background: #c82333;
        }
        .btn-success {
            background: #28a745;
            color: white;
        }
        .btn-success:hover {
            background: #218838;
        }
        .table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        .table th {
            background: #f8f9fa;
            font-weight: bold;
            color: #333;
        }
        .table tr:hover {
            background: #f8f9fa;
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            padding: 20px;
        }
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
        }
        .pagination button:hover:not(:disabled) {
            background: var(--primary-color);
            color: white;
        }
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
        }
        .error {
            background: #ffebee;
            color: #c62828;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }
        .status-available {
            background: #d4edda;
            color: #155724;
        }
        .status-unavailable {
            background: #f8d7da;
            color: #721c24;
        }
        .book-title {
            font-weight: bold;
            color: #333;
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .book-description {
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: #666;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.3s ease;
        }
        
        @@keyframes modalSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        .modal-header {
            background: linear-gradient(135deg, #FF6B00, #FF8C00);
            color: white;
            padding: 20px 30px;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 20px;
            font-weight: bold;
            margin: 0;
        }
        
        .close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }
        
        .close:hover {
            opacity: 0.7;
        }
        
        .modal-body {
            padding: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #eee;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #FF6B00;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .form-row-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
        }
        
        .modal-footer {
            padding: 20px 30px;
            background: #f8f9fa;
            border-radius: 0 0 12px 12px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        .btn-modal {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s;
        }
        
        .btn-modal-primary {
            background: #FF6B00;
            color: white;
        }
        
        .btn-modal-primary:hover {
            background: #FF4500;
        }
        
        .btn-modal-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-modal-secondary:hover {
            background: #5a6268;
        }
        
        .btn-modal-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn-modal-danger:hover {
            background: #c82333;
        }
        
        .readonly-field {
            background: #f8f9fa;
            color: #6c757d;
        }
        
        .error-message {
            color: #dc3545;
            font-size: 12px;
            margin-top: 5px;
        }
        
        .success-message {
            color: #28a745;
            font-size: 12px;
            margin-top: 5px;
        }
        
        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }
    </style>

<div class="admin-container">
        <h1>Book Management</h1>
        
        <div id="error-container"></div>
        
        <div class="filters">
            <div class="filter-row">
                <div class="filter-group">
                    <label for="search">Search</label>
                    <input type="text" id="search" placeholder="Search books...">
                </div>
                <div class="filter-group">
                    <label for="category">Category</label>
                    <select id="category">
                        <option value="">All Categories</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="author">Author</label>
                    <select id="author">
                        <option value="">All Authors</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="limit">Per Page</label>
                    <select id="limit">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
    </select>
                </div>
                <div class="filter-group">
                    <button class="btn btn-primary" onclick="loadBooks()">Search</button>
                </div>
                <div class="filter-group">
                    <button class="btn btn-success" onclick="openBookModal('add')">+ Add New Book</button>
                </div>
</div>
</div>

        <div class="table-container">
            <div id="books-loading" class="loading">Loading books...</div>
            <table class="table" id="books-table" style="display: none;">
        <thead>
            <tr>
                <th>Title</th>
                <th>Authors</th>
                <th>Categories</th>
                <th>Year</th>
                        <th>Status</th>
                        <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
                <tbody id="books-tbody">
                </tbody>
            </table>
        </div>

        <div class="pagination" id="pagination" style="display: none;">
            <button id="prev-page" onclick="changePage(-1)">Previous</button>
            <span id="page-info">Page 1 of 1</span>
            <button id="next-page" onclick="changePage(1)">Next</button>
        </div>

    <!-- Book Modal -->
    <div id="bookModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="bookModalTitle">Add New Book</h2>
                <span class="close" onclick="closeBookModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="bookForm">
                    <div class="form-group">
                        <label for="bookTitle">Title *</label>
                        <input type="text" id="bookTitle" name="title" required>
                        <div id="title-error" class="error-message"></div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="bookAuthor">Author *</label>
                            <select id="bookAuthor" name="authorId" required>
                                <option value="">Select Author</option>
                            </select>
                            <div id="authorId-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="bookCategory">Category *</label>
                            <select id="bookCategory" name="categoryId" required>
                                <option value="">Select Category</option>
                            </select>
                            <div id="categoryId-error" class="error-message"></div>
                        </div>
                    </div>
                    
                    <div class="form-row-3">
                        <div class="form-group">
                            <label for="bookIsbn">ISBN</label>
                            <input type="text" id="bookIsbn" name="isbn">
                            <div id="isbn-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="bookPages">Pages</label>
                            <input type="number" id="bookPages" name="pages" min="1">
                            <div id="pages-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="bookPublishedYear">Published Year</label>
                            <input type="number" id="bookPublishedYear" name="publishedYear" min="1000" max="2025">
                            <div id="publishedYear-error" class="error-message"></div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="bookDescription">Description</label>
                        <textarea id="bookDescription" name="description" class="form-textarea" placeholder="Enter book description..."></textarea>
                        <div id="description-error" class="error-message"></div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="bookCoverUrl">Cover Image URL</label>
                            <input type="url" id="bookCoverUrl" name="coverImageUrl" placeholder="https://example.com/cover.jpg">
                            <div id="coverImageUrl-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="bookfileUrl">PDF URL</label>
                            <input type="url" id="bookfileUrl" name="fileUrl" placeholder="https://example.com/book.pdf">
                            <div id="fileUrl-error" class="error-message"></div>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="bookIsAvailable">Availability</label>
                            <select id="bookIsAvailable" name="isAvailable">
                                <option value="true">Available</option>
                                <option value="false">Not Available</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="bookIsFeatured">Featured</label>
                            <select id="bookIsFeatured" name="isFeatured">
                                <option value="false">No</option>
                                <option value="true">Yes</option>
                            </select>
                        </div>
                    </div>
                    
                    <div id="bookFormMessage" class="success-message" style="display: none;"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-modal btn-modal-secondary" onclick="closeBookModal()">Cancel</button>
                <button type="button" class="btn-modal btn-modal-primary" id="bookModalSaveBtn" onclick="saveBook()">Save Book</button>
                <button type="button" class="btn-modal btn-modal-danger" id="bookModalDeleteBtn" onclick="deleteBook()" style="display: none;">Delete Book</button>
            </div>
        </div>
    </div>

    <script src="~/template/template.js"></script>
    <script>
        let currentPage = 1;
        let currentLimit = 10;
        let totalPages = 1;

        document.addEventListener('DOMContentLoaded', function() {
            loadCategories();
            loadAuthors();
            loadBooks();
        });

        async function loadCategories() {
            try {
                const response = await ELibAPI.get(ELibAPI.endpoints.category.getAll());
                if (response.success) {
                    const categorySelect = document.getElementById('category');
                    categorySelect.innerHTML = '<option value="">All Categories</option>';
                    response.data.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        async function loadAuthors() {
            try {
                const response = await ELibAPI.get(ELibAPI.endpoints.author.getAll());
                if (response.success) {
                    const authorSelect = document.getElementById('author');
                    authorSelect.innerHTML = '<option value="">All Authors</option>';
                    response.data.forEach(author => {
                        const option = document.createElement('option');
                        option.value = author.id;
                        option.textContent = author.name;
                        authorSelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading authors:', error);
            }
        }

        async function loadBooks() {
            try {
                const search = document.getElementById('search').value;
                const category = document.getElementById('category').value;
                const author = document.getElementById('author').value;
                const limit = document.getElementById('limit').value;
                
                currentLimit = parseInt(limit);
                
                // Show loading
                document.getElementById('books-loading').style.display = 'block';
                document.getElementById('books-table').style.display = 'none';
                document.getElementById('pagination').style.display = 'none';

                // Build query parameters
                let queryParams = '';
                if (search) queryParams += `&search=${encodeURIComponent(search)}`;
                if (category) queryParams += `&category=${encodeURIComponent(category)}`;
                if (author) queryParams += `&author=${encodeURIComponent(author)}`;

                const response = await ELibAPI.get(ELibAPI.endpoints.book.getAll(currentPage, currentLimit) + queryParams);
                
                if (response.success) {
                    displayBooks(response.data);
                    updatePagination();
                } else {
                    showError('Failed to load books: ' + response.error);
                }

            } catch (error) {
                console.error('Error loading books:', error);
                showError('Failed to load books: ' + error.message);
            } finally {
                document.getElementById('books-loading').style.display = 'none';
                document.getElementById('books-table').style.display = 'table';
                document.getElementById('pagination').style.display = 'flex';
            }
        }

        function displayBooks(books) {
            const tbody = document.getElementById('books-tbody');
            tbody.innerHTML = '';

            if (!books || books.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 20px;">No books found</td></tr>';
                return;
            }

            books.forEach(book => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="book-title" title="${book.title}">${book.title}</div>
                        <div class="book-description" title="${book.description || ''}">${book.description || 'No description'}</div>
                    </td>
                    <td>${Array.isArray(book.authors) && book.authors.length > 0 ? book.authors.join(', ') : '-'}</td>
                    <td>${Array.isArray(book.categories) && book.categories.length > 0 ? book.categories.join(', ') : '-'}</td>
                    <td>${book.publishYear || '-'}</td>
                    <td><span class="status-badge ${book.isAvailable ? 'status-available' : 'status-unavailable'}">${book.isAvailable ? 'Available' : 'Unavailable'}</span></td>
                    <td>${new Date(book.createdAt).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-secondary" onclick="openBookModal('view', '${book.id}')">View</button>
                        <button class="btn btn-primary" onclick="openBookModal('edit', '${book.id}')">Edit</button>
                        <button class="btn btn-danger" onclick="confirmDeleteBook('${book.id}')">Delete</button>
                        <button class="btn ${book.isAvailable ? 'btn-danger' : 'btn-success'}" onclick="toggleAvailability('${book.id}', ${!book.isAvailable})">
                            ${book.isAvailable ? 'Make Unavailable' : 'Make Available'}
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updatePagination() {
            // This would be calculated based on total count from API
            totalPages = Math.max(1, Math.ceil(100 / currentLimit)); // Assuming 100 total books
            
            document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;
            document.getElementById('prev-page').disabled = currentPage <= 1;
            document.getElementById('next-page').disabled = currentPage >= totalPages;
        }

        function changePage(direction) {
            const newPage = currentPage + direction;
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                loadBooks();
            }
        }

        function viewBook(bookId) {
            window.location.href = `/Admin/BookDetails/${bookId}`;
        }

        function editBook(bookId) {
            window.location.href = `/Admin/BookDetails/${bookId}?edit=true`;
        }

        function addBook() {
            window.location.href = '/Admin/BookDetails';
        }

        async function deleteBook(bookId) {
            if (!confirm('Are you sure you want to delete this book?')) {
                return;
            }

            try {
                const response = await ELibAPI.delete(ELibAPI.endpoints.book.delete(bookId));
                if (response.success) {
                    alert('Book deleted successfully');
                    loadBooks();
                } else {
                    showError('Failed to delete book: ' + response.error);
                }
            } catch (error) {
                console.error('Error deleting book:', error);
                showError('Failed to delete book: ' + error.message);
            }
        }

        async function toggleAvailability(bookId, isAvailable) {
            try {
                const response = await ELibAPI.put(ELibAPI.endpoints.book.setAvailability(bookId), { isAvailable });
                if (response.success) {
                    alert(`Book ${isAvailable ? 'made available' : 'made unavailable'} successfully`);
                    loadBooks();
                } else {
                    showError('Failed to update book availability: ' + response.error);
                }
            } catch (error) {
                console.error('Error updating book availability:', error);
                showError('Failed to update book availability: ' + error.message);
            }
        }

        function showError(message) {
            const errorContainer = document.getElementById('error-container');
            errorContainer.innerHTML = `<div class="error">${message}</div>`;
        }

        // Book Modal Functions
        let currentBookId = null;
        let bookModalMode = 'add'; // 'add', 'edit', 'view'

        function openBookModal(mode, bookId = null) {
            bookModalMode = mode;
            currentBookId = bookId;
            const modal = document.getElementById('bookModal');
            const modalTitle = document.getElementById('bookModalTitle');
            const saveBtn = document.getElementById('bookModalSaveBtn');
            const deleteBtn = document.getElementById('bookModalDeleteBtn');
            const form = document.getElementById('bookForm');
            
            // Clear form and errors
            form.reset();
            clearBookFormErrors();
            
            // Set modal title and button visibility
            if (mode === 'add') {
                modalTitle.textContent = 'Add New Book';
                saveBtn.textContent = 'Save Book';
                saveBtn.style.display = 'inline-block';
                deleteBtn.style.display = 'none';
                makeBookFormEditable(true);
            } else if (mode === 'edit') {
                modalTitle.textContent = 'Edit Book';
                saveBtn.textContent = 'Update Book';
                saveBtn.style.display = 'inline-block';
                deleteBtn.style.display = 'inline-block';
                makeBookFormEditable(true);
                loadBookData(bookId);
            } else if (mode === 'view') {
                modalTitle.textContent = 'Book Details';
                saveBtn.style.display = 'none';
                deleteBtn.style.display = 'none';
                makeBookFormEditable(false);
                loadBookData(bookId);
            }
            
            // Load dropdowns
            loadAuthorsForModal();
            loadCategoriesForModal();
            
            modal.style.display = 'block';
        }

        function closeBookModal() {
            const modal = document.getElementById('bookModal');
            modal.style.display = 'none';
            clearBookFormErrors();
        }

        function makeBookFormEditable(editable) {
            const inputs = document.querySelectorAll('#bookForm input, #bookForm select, #bookForm textarea');
            inputs.forEach(input => {
                input.disabled = !editable;
                if (!editable) {
                    input.classList.add('readonly-field');
                } else {
                    input.classList.remove('readonly-field');
                }
            });
        }

        function clearBookFormErrors() {
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach(el => el.textContent = '');
            const messageElement = document.getElementById('bookFormMessage');
            messageElement.style.display = 'none';
        }

        async function loadAuthorsForModal() {
            try {
                const response = await ELibAPI.get('/api/v1/author');
                if (response.success) {
                    const authorSelect = document.getElementById('bookAuthor');
                    authorSelect.innerHTML = '<option value="">Select Author</option>';
                    response.data.forEach(author => {
                        const option = document.createElement('option');
                        option.value = author.id;
                        option.textContent = author.name;
                        authorSelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading authors:', error);
            }
        }

        async function loadCategoriesForModal() {
            try {
                const response = await ELibAPI.get('/api/v1/category');
                if (response.success) {
                    const categorySelect = document.getElementById('bookCategory');
                    categorySelect.innerHTML = '<option value="">Select Category</option>';
                    response.data.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        async function loadBookData(bookId) {
            try {
                const response = await ELibAPI.get(`/api/v1/book/${bookId}`);
                if (response.success) {
                    const book = response.data;
                    document.getElementById('bookTitle').value = book.title || '';
                    
                    // Set author - find matching author by name
                    if (book.authors && book.authors.length > 0) {
                        const authorSelect = document.getElementById('bookAuthor');
                        const authorName = book.authors[0]; // Take first author
                        for (let option of authorSelect.options) {
                            if (option.text === authorName) {
                                authorSelect.value = option.value;
                                break;
                            }
                        }
                    }
                    
                    // Set category - find matching category by name
                    if (book.categories && book.categories.length > 0) {
                        const categorySelect = document.getElementById('bookCategory');
                        const categoryName = book.categories[0]; // Take first category
                        for (let option of categorySelect.options) {
                            if (option.text === categoryName) {
                                categorySelect.value = option.value;
                                break;
                            }
                        }
                    }
                    
                    document.getElementById('bookPublishedYear').value = book.publishYear || '';
                    document.getElementById('bookDescription').value = book.description || '';
                    document.getElementById('bookfileUrl').value = book.fileUrl || '';
                    document.getElementById('bookIsAvailable').value = book.isAvailable ? 'true' : 'false';
                } else {
                    showError('Failed to load book data: ' + response.message);
                }
            } catch (error) {
                showError('Error loading book data: ' + error.message);
            }
        }

        async function saveBook() {
            if (bookModalMode === 'view') return;
            
            clearBookFormErrors();
            
            // Validate form
            const title = document.getElementById('bookTitle').value.trim();
            const authorId = document.getElementById('bookAuthor').value;
            const categoryId = document.getElementById('bookCategory').value;
            const publishedYear = document.getElementById('bookPublishedYear').value;
            const description = document.getElementById('bookDescription').value.trim();
            const fileUrl = document.getElementById('bookfileUrl').value.trim();
            const isAvailable = document.getElementById('bookIsAvailable').value === 'true';
            
            let hasErrors = false;
            
            if (!title) {
                document.getElementById('title-error').textContent = 'Title is required';
                hasErrors = true;
            }
            
            if (!authorId) {
                document.getElementById('authorId-error').textContent = 'Author is required';
                hasErrors = true;
            }
            
            if (!categoryId) {
                document.getElementById('categoryId-error').textContent = 'Category is required';
                hasErrors = true;
            }
            
            if (publishedYear && (parseInt(publishedYear) < 1000 || parseInt(publishedYear) > 2025)) {
                document.getElementById('publishedYear-error').textContent = 'Published year must be between 1000 and 2025';
                hasErrors = true;
            }
            
            if (hasErrors) return;
            
            try {
                // Get author and category names from selected IDs
                const authorSelect = document.getElementById('bookAuthor');
                const categorySelect = document.getElementById('bookCategory');
                const selectedAuthorName = authorSelect.options[authorSelect.selectedIndex]?.text || '';
                const selectedCategoryName = categorySelect.options[categorySelect.selectedIndex]?.text || '';
                
                const bookData = {
                    title,
                    authors: selectedAuthorName ? [selectedAuthorName] : [],
                    categories: selectedCategoryName ? [selectedCategoryName] : [],
                    description: description || '',
                    publishYear: publishedYear ? parseInt(publishedYear) : new Date().getFullYear(),
                    fileUrl: fileUrl || '',
                    fileFormat: 'pdf',
                    isAvailable
                };
                
                let response;
                if (bookModalMode === 'add') {
                    response = await ELibAPI.post('/api/v1/book', bookData);
                } else {
                    response = await ELibAPI.put(`/api/v1/book/${currentBookId}`, bookData);
                }
                
                if (response.success) {
                    document.getElementById('bookFormMessage').textContent = 
                        bookModalMode === 'add' ? 'Book created successfully!' : 'Book updated successfully!';
                    document.getElementById('bookFormMessage').style.display = 'block';
                    
                    // Reload books list
                    setTimeout(() => {
                        closeBookModal();
                        loadBooks();
                    }, 1500);
                } else {
                    showError('Failed to save book: ' + response.message);
                }
            } catch (error) {
                showError('Error saving book: ' + error.message);
            }
        }

        async function deleteBook() {
            if (!currentBookId) return;
            
            if (!confirm('Are you sure you want to delete this book?')) return;
            
            try {
                const response = await ELibAPI.delete(`/api/v1/book/${currentBookId}`);
                if (response.success) {
                    document.getElementById('bookFormMessage').textContent = 'Book deleted successfully!';
                    document.getElementById('bookFormMessage').style.display = 'block';
                    
                    setTimeout(() => {
                        closeBookModal();
                        loadBooks();
                    }, 1500);
                } else {
                    showError('Failed to delete book: ' + response.message);
                }
            } catch (error) {
                showError('Error deleting book: ' + error.message);
            }
        }

        async function confirmDeleteBook(bookId) {
            if (!confirm('Are you sure you want to delete this book?')) return;
            
            try {
                const response = await ELibAPI.delete(`/api/v1/book/${bookId}`);
                if (response.success) {
                    showSuccess('Book deleted successfully!');
                    loadBooks();
                } else {
                    showError('Failed to delete book: ' + response.message);
                }
            } catch (error) {
                showError('Error deleting book: ' + error.message);
            }
        }

        function showSuccess(message) {
            const errorContainer = document.getElementById('error-container');
            errorContainer.innerHTML = `<div class="alert alert-success">${message}</div>`;
            setTimeout(() => {
                errorContainer.innerHTML = '';
            }, 3000);
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('bookModal');
            if (event.target === modal) {
                closeBookModal();
            }
        }
    </script>
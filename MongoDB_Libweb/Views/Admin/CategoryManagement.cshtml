@{
    ViewData["Title"] = "Category Management";
    Layout = "~/Views/Admin/_AdminLayout.cshtml";
}

<style>
    .admin-container {
        margin: 0 auto;
        padding: 20px;
    }
    .filters {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .filter-row {
        display: flex;
        gap: 15px;
        align-items: center;
        flex-wrap: wrap;
    }
    .filter-group {
        display: flex;
        flex-direction: column;
        min-width: 150px;
    }
    .filter-group label {
        font-weight: bold;
        margin-bottom: 5px;
        color: #333;
    }
    .filter-group input, .filter-group select {
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 14px;
    }
    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s;
    }
    .btn-primary {
        background: var(--primary-color);
        color: white;
    }
    .btn-primary:hover {
        background: #e55a00;
    }
    .btn-success {
        background: #28a745;
        color: white;
    }
    .btn-success:hover {
        background: #218838;
    }
    .btn-secondary {
        background: #6c757d;
        color: white;
    }
    .btn-secondary:hover {
        background: #5a6268;
    }
    .btn-danger {
        background: #dc3545;
        color: white;
    }
    .btn-danger:hover {
        background: #c82333;
    }
    .table-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }
    .table {
        width: 100%;
        border-collapse: collapse;
    }
    .table th {
        background: #f8f9fa;
        padding: 15px;
        text-align: left;
        font-weight: bold;
        color: #333;
        border-bottom: 2px solid #dee2e6;
    }
    .table td {
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
    }
    .table tr:hover {
        background: #f8f9fa;
    }
    .loading {
        text-align: center;
        padding: 50px;
        color: #666;
    }
    .error {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 20px;
    }
    .pagination button {
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background: white;
        cursor: pointer;
    }
    .pagination button:hover:not(:disabled) {
        background: #f8f9fa;
    }
    .pagination button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 0;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        animation: modalSlideIn 0.3s ease;
    }
    
    @@keyframes modalSlideIn {
        from { transform: translateY(-50px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }
    
    .modal-header {
        background: linear-gradient(135deg, #FF6B00, #FF8C00);
        color: white;
        padding: 20px 30px;
        border-radius: 12px 12px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .modal-title {
        font-size: 20px;
        font-weight: bold;
        margin: 0;
    }
    
    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        line-height: 1;
    }
    
    .close:hover {
        opacity: 0.7;
    }
    
    .modal-body {
        padding: 30px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
        color: #333;
    }
    
    .form-group input,
    .form-group textarea {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #eee;
        border-radius: 8px;
        font-size: 14px;
        transition: border-color 0.3s;
    }
    
    .form-group input:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: #FF6B00;
    }
    
    .modal-footer {
        padding: 20px 30px;
        background: #f8f9fa;
        border-radius: 0 0 12px 12px;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }
    
    .btn-modal {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        transition: all 0.3s;
    }
    
    .btn-modal-primary {
        background: #FF6B00;
        color: white;
    }
    
    .btn-modal-primary:hover {
        background: #FF4500;
    }
    
    .btn-modal-secondary {
        background: #6c757d;
        color: white;
    }
    
    .btn-modal-secondary:hover {
        background: #5a6268;
    }
    
    .btn-modal-danger {
        background: #dc3545;
        color: white;
    }
    
    .btn-modal-danger:hover {
        background: #c82333;
    }
    
    .readonly-field {
        background: #f8f9fa;
        color: #6c757d;
    }
    
    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
    }
    
    .success-message {
        color: #28a745;
        font-size: 12px;
        margin-top: 5px;
    }
    
    .form-textarea {
        min-height: 100px;
        resize: vertical;
    }
    
    /* Responsive Design */
    @@media (max-width: 1024px) {
        .admin-container {
            padding: 15px;
        }
        
        .filter-row {
            gap: 12px;
        }
        
        .filter-group {
            min-width: 140px;
        }
        
        .table-container {
            overflow-x: auto;
        }
        
        .modal-content {
            width: 95%;
            margin: 5% auto;
        }
    }
    
    @@media (max-width: 768px) {
        .admin-container {
            padding: 10px;
        }
        
        .filters {
            padding: 15px;
            margin-bottom: 15px;
        }
        
        .filter-row {
            flex-direction: column;
            gap: 15px;
        }
        
        .filter-group {
            min-width: auto;
            width: 100%;
        }
        
        .filter-group input, 
        .filter-group select {
            width: 100%;
        }
        
        .table-container {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        
        .table {
            min-width: 500px;
        }
        
        .table th, .table td {
            padding: 8px 6px;
            font-size: 12px;
        }
        
        .btn {
            padding: 6px 12px;
            font-size: 12px;
        }
        
        .modal-content {
            width: 98%;
            margin: 2% auto;
            max-height: 95vh;
        }
        
        .modal-header {
            padding: 15px 20px;
        }
        
        .modal-title {
            font-size: 18px;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .modal-footer {
            padding: 15px 20px;
            flex-direction: column;
            gap: 10px;
        }
        
        .btn-modal {
            width: 100%;
            padding: 12px 20px;
        }
    }
    
    @@media (max-width: 480px) {
        .admin-container {
            padding: 5px;
        }
        
        .filters {
            padding: 10px;
        }
        
        .table th, .table td {
            padding: 6px 4px;
            font-size: 11px;
        }
        
        .btn {
            padding: 4px 8px;
            font-size: 11px;
        }
        
        .modal-content {
            width: 100%;
            margin: 0;
            border-radius: 0;
            max-height: 100vh;
        }
        
        .modal-header {
            padding: 12px 15px;
        }
        
        .modal-title {
            font-size: 16px;
        }
        
        .modal-body {
            padding: 15px;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 10px 12px;
            font-size: 14px;
        }
        
        .pagination {
            flex-wrap: wrap;
            gap: 5px;
        }
        
        .pagination button {
            padding: 6px 10px;
            font-size: 12px;
        }
    }
    
    @@media (max-width: 320px) {
        .table {
            min-width: 400px;
        }
        
        .table th, .table td {
            padding: 4px 2px;
            font-size: 10px;
        }
        
        .btn {
            padding: 3px 6px;
            font-size: 10px;
        }
        
        .modal-header {
            padding: 10px 12px;
        }
        
        .modal-title {
            font-size: 14px;
        }
        
        .modal-body {
            padding: 12px;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 8px 10px;
            font-size: 12px;
        }
    }
</style>

<div class="admin-container">
    <h1>Category Management</h1>
    
    <div id="error-container"></div>
    
    <div class="filters">
        <div class="filter-row">
            <div class="filter-group">
                <label for="search">Search</label>
                <input type="text" id="search" placeholder="Search categories...">
            </div>
            <div class="filter-group">
                <label for="limit">Per Page</label>
                <select id="limit">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                </select>
            </div>
            <div class="filter-group">
                <button class="btn btn-primary" onclick="loadCategories()">Search</button>
            </div>
            <div class="filter-group">
                <button class="btn btn-success" onclick="openCategoryModal('add')">+ Add New Category</button>
            </div>
        </div>
    </div>

    <div class="table-container">
        <div id="categories-loading" class="loading">Loading categories...</div>
        <table class="table" id="categories-table" style="display: none;">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Created At</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="categories-tbody">
            </tbody>
        </table>
    </div>

    <div class="pagination" id="pagination" style="display: none;">
        <button id="prev-page" onclick="changePage(-1)">Previous</button>
        <span id="page-info">Page 1 of 1</span>
        <button id="next-page" onclick="changePage(1)">Next</button>
    </div>
</div>

<!-- Category Modal -->
<div id="categoryModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title" id="categoryModalTitle">Add New Category</h2>
            <span class="close" onclick="closeCategoryModal()">&times;</span>
        </div>
        <div class="modal-body">
            <form id="categoryForm">
                <div class="form-group">
                    <label for="categoryName">Name *</label>
                    <input type="text" id="categoryName" name="name" required>
                    <div id="name-error" class="error-message"></div>
                </div>
                
                <div class="form-group">
                    <label for="categoryDescription">Description</label>
                    <textarea id="categoryDescription" name="description" class="form-textarea" placeholder="Enter category description..."></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>
                
                <div id="categoryFormMessage" class="success-message" style="display: none;"></div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-modal btn-modal-secondary" onclick="closeCategoryModal()">Cancel</button>
            <button type="button" class="btn-modal btn-modal-primary" id="categoryModalSaveBtn" onclick="saveCategory()">Save Category</button>
            <button type="button" class="btn-modal btn-modal-danger" id="categoryModalDeleteBtn" onclick="deleteCategory()" style="display: none;">Delete Category</button>
        </div>
    </div>
</div>

<script src="~/template/template.js"></script>
<script>
    let currentPage = 1;
    let currentLimit = 10;
    let totalPages = 1;

    document.addEventListener('DOMContentLoaded', function() {
        loadCategories();
    });

    async function loadCategories() {
        try {
            document.getElementById('categories-loading').style.display = 'block';
            document.getElementById('categories-table').style.display = 'none';
            document.getElementById('pagination').style.display = 'none';

            const search = document.getElementById('search').value;
            const limit = document.getElementById('limit').value;
            currentLimit = parseInt(limit);

            let url = `/api/v1/category?page=${currentPage}&limit=${currentLimit}`;
            if (search) {
                // For search, we'll filter on client side since API doesn't have search
                url = `/api/v1/category?page=1&limit=1000`; // Get all for client-side filtering
            }

            const response = await ELibAPI.get(url);
            
            if (response.success) {
                let categories = response.data;
                
                // Client-side search if search term provided
                if (search) {
                    categories = categories.filter(cat => 
                        cat.name.toLowerCase().includes(search.toLowerCase()) ||
                        (cat.description && cat.description.toLowerCase().includes(search.toLowerCase()))
                    );
                    
                    // Calculate pagination for filtered results
                    totalPages = Math.ceil(categories.length / currentLimit);
                    const startIndex = (currentPage - 1) * currentLimit;
                    const endIndex = startIndex + currentLimit;
                    categories = categories.slice(startIndex, endIndex);
                } else {
                    // Calculate total pages based on count
                    const countResponse = await ELibAPI.get('/api/v1/category/count');
                    if (countResponse.success) {
                        totalPages = Math.ceil(countResponse.data / currentLimit);
                    }
                }

                displayCategories(categories);
                updatePagination();
            } else {
                showError('Failed to load categories: ' + response.message);
            }
        } catch (error) {
            console.error('Error loading categories:', error);
            showError('Failed to load categories: ' + error.message);
        } finally {
            document.getElementById('categories-loading').style.display = 'none';
            document.getElementById('categories-table').style.display = 'table';
            document.getElementById('pagination').style.display = 'flex';
        }
    }

    function displayCategories(categories) {
        const tbody = document.getElementById('categories-tbody');
        tbody.innerHTML = '';

        if (!categories || categories.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 20px;">No categories found</td></tr>';
            return;
        }

        categories.forEach(category => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${category.id}</td>
                <td>${category.name}</td>
                <td>${category.description || '-'}</td>
                <td>${new Date(category.createdAt).toLocaleDateString()}</td>
                <td>
                    <button class="btn btn-secondary" onclick="openCategoryModal('view', '${category.id}')">View</button>
                    <button class="btn btn-primary" onclick="openCategoryModal('edit', '${category.id}')">Edit</button>
                    <button class="btn btn-danger" onclick="confirmDeleteCategory('${category.id}')">Delete</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    function updatePagination() {
        document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;
        document.getElementById('prev-page').disabled = currentPage <= 1;
        document.getElementById('next-page').disabled = currentPage >= totalPages;
    }

    function changePage(direction) {
        const newPage = currentPage + direction;
        if (newPage >= 1 && newPage <= totalPages) {
            currentPage = newPage;
            loadCategories();
        }
    }

    // Category Modal Functions
    let currentCategoryId = null;
    let categoryModalMode = 'add'; // 'add', 'edit', 'view'

    function openCategoryModal(mode, categoryId = null) {
        categoryModalMode = mode;
        currentCategoryId = categoryId;
        const modal = document.getElementById('categoryModal');
        const modalTitle = document.getElementById('categoryModalTitle');
        const saveBtn = document.getElementById('categoryModalSaveBtn');
        const deleteBtn = document.getElementById('categoryModalDeleteBtn');
        const form = document.getElementById('categoryForm');
        
        // Clear form and errors
        form.reset();
        clearCategoryFormErrors();
        
        // Set modal title and button visibility
        if (mode === 'add') {
            modalTitle.textContent = 'Add New Category';
            saveBtn.textContent = 'Save Category';
            saveBtn.style.display = 'inline-block';
            deleteBtn.style.display = 'none';
            makeCategoryFormEditable(true);
        } else if (mode === 'edit') {
            modalTitle.textContent = 'Edit Category';
            saveBtn.textContent = 'Update Category';
            saveBtn.style.display = 'inline-block';
            deleteBtn.style.display = 'inline-block';
            makeCategoryFormEditable(true);
            loadCategoryData(categoryId);
        } else if (mode === 'view') {
            modalTitle.textContent = 'Category Details';
            saveBtn.style.display = 'none';
            deleteBtn.style.display = 'none';
            makeCategoryFormEditable(false);
            loadCategoryData(categoryId);
        }
        
        modal.style.display = 'block';
    }

    function closeCategoryModal() {
        const modal = document.getElementById('categoryModal');
        modal.style.display = 'none';
        clearCategoryFormErrors();
    }

    function makeCategoryFormEditable(editable) {
        const inputs = document.querySelectorAll('#categoryForm input, #categoryForm textarea');
        inputs.forEach(input => {
            input.disabled = !editable;
            if (!editable) {
                input.classList.add('readonly-field');
            } else {
                input.classList.remove('readonly-field');
            }
        });
    }

    function clearCategoryFormErrors() {
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(el => el.textContent = '');
        const messageElement = document.getElementById('categoryFormMessage');
        messageElement.style.display = 'none';
    }

    async function loadCategoryData(categoryId) {
        try {
            const response = await ELibAPI.get(`/api/v1/category/${categoryId}`);
            if (response.success) {
                const category = response.data;
                document.getElementById('categoryName').value = category.name || '';
                document.getElementById('categoryDescription').value = category.description || '';
            } else {
                showError('Failed to load category data: ' + response.message);
            }
        } catch (error) {
            showError('Error loading category data: ' + error.message);
        }
    }

    async function saveCategory() {
        if (categoryModalMode === 'view') return;
        
        clearCategoryFormErrors();
        
        // Validate form
        const name = document.getElementById('categoryName').value.trim();
        const description = document.getElementById('categoryDescription').value.trim();
        
        let hasErrors = false;
        
        if (!name) {
            document.getElementById('name-error').textContent = 'Name is required';
            hasErrors = true;
        }
        
        if (hasErrors) return;
        
        try {
            const categoryData = {
                name,
                description: description || null
            };
            
            let response;
            if (categoryModalMode === 'add') {
                response = await ELibAPI.post('/api/v1/category', categoryData);
            } else {
                response = await ELibAPI.put(`/api/v1/category/${currentCategoryId}`, categoryData);
            }
            
            if (response.success) {
                document.getElementById('categoryFormMessage').textContent = 
                    categoryModalMode === 'add' ? 'Category created successfully!' : 'Category updated successfully!';
                document.getElementById('categoryFormMessage').style.display = 'block';
                
                // Reload categories list
                setTimeout(() => {
                    closeCategoryModal();
                    loadCategories();
                }, 1500);
            } else {
                showError('Failed to save category: ' + response.message);
            }
        } catch (error) {
            showError('Error saving category: ' + error.message);
        }
    }

    async function deleteCategory() {
        if (!currentCategoryId) return;
        
        if (!confirm('Are you sure you want to delete this category?')) return;
        
        try {
            const response = await ELibAPI.delete(`/api/v1/category/${currentCategoryId}`);
            if (response.success) {
                document.getElementById('categoryFormMessage').textContent = 'Category deleted successfully!';
                document.getElementById('categoryFormMessage').style.display = 'block';
                
                setTimeout(() => {
                    closeCategoryModal();
                    loadCategories();
                }, 1500);
            } else {
                showError('Failed to delete category: ' + response.message);
            }
        } catch (error) {
            showError('Error deleting category: ' + error.message);
        }
    }

    async function confirmDeleteCategory(categoryId) {
        if (!confirm('Are you sure you want to delete this category?')) return;
        
        try {
            const response = await ELibAPI.delete(`/api/v1/category/${categoryId}`);
            if (response.success) {
                showSuccess('Category deleted successfully!');
                loadCategories();
            } else {
                showError('Failed to delete category: ' + response.message);
            }
        } catch (error) {
            showError('Error deleting category: ' + error.message);
        }
    }

    function showError(message) {
        const errorContainer = document.getElementById('error-container');
        errorContainer.innerHTML = `<div class="error">${message}</div>`;
    }

    function showSuccess(message) {
        const errorContainer = document.getElementById('error-container');
        errorContainer.innerHTML = `<div class="alert alert-success">${message}</div>`;
        setTimeout(() => {
            errorContainer.innerHTML = '';
        }, 3000);
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('categoryModal');
        if (event.target === modal) {
            closeCategoryModal();
        }
    }
</script>


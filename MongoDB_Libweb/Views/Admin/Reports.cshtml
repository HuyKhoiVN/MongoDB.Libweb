@{
    ViewData["Title"] = "Reports";
    Layout = "~/Views/Admin/_AdminLayout.cshtml";
}

<style>
    .admin-container {
        margin: 0 auto;
        padding: 20px;
    }
    .reports-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    .report-card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
        transition: transform 0.3s;
    }
    .report-card:hover {
        transform: translateY(-5px);
    }
    .report-icon {
        font-size: 48px;
        margin-bottom: 15px;
    }
    .report-title {
        font-size: 18px;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }
    .report-description {
        color: #666;
        margin-bottom: 20px;
        font-size: 14px;
    }
    .report-button {
        background: linear-gradient(135deg, #FF6B00, #FF8C00);
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s;
        text-decoration: none;
        display: inline-block;
    }
    .report-button:hover {
        background: linear-gradient(135deg, #FF4500, #FF6B00);
        color: white;
        text-decoration: none;
        transform: translateY(-2px);
    }
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    .stat-card {
        background: linear-gradient(135deg, #FF6B00, #FF8C00);
        color: white;
        padding: 25px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 4px 20px rgba(255, 107, 0, 0.2);
    }
    .stat-number {
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .stat-label {
        font-size: 14px;
        opacity: 0.9;
    }
    .chart-container {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .chart-title {
        font-size: 20px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
        text-align: center;
    }
    .chart-placeholder {
        height: 300px;
        background: #f8f9fa;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #6c757d;
        font-size: 16px;
    }
    .filters {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .filter-row {
        display: flex;
        gap: 15px;
        align-items: center;
        flex-wrap: wrap;
    }
    .filter-group {
        display: flex;
        flex-direction: column;
        min-width: 150px;
    }
    .filter-group label {
        font-weight: bold;
        margin-bottom: 5px;
        color: #333;
    }
    .filter-group input, .filter-group select {
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 14px;
    }
    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s;
    }
    .btn-primary {
        background: var(--primary-color);
        color: white;
    }
    .btn-primary:hover {
        background: #e55a00;
    }
    .loading {
        text-align: center;
        padding: 50px;
        color: #666;
    }
    .error {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    .data-table th,
    .data-table td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #eee;
    }
    .data-table th {
        background: #F5F5F5;
        font-weight: bold;
        color: #333;
    }
    .data-table tr:hover {
        background: #f9f9f9;
    }
    .overdue {
        color: #dc3545;
        font-weight: bold;
    }
    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .status-borrowed {
        background: #d1ecf1;
        color: #0c5460;
    }
    .status-returned {
        background: #d4edda;
        color: #155724;
    }
    .status-overdue {
        background: #f8d7da;
        color: #721c24;
    }
</style>

<div class="admin-container">
    <h1>Reports & Analytics</h1>
    
    <div id="error-container"></div>
    
    <!-- Quick Stats -->
    <div class="stats-grid" id="statsGrid">
        <div class="stat-card">
            <div class="stat-number" id="totalUsers">-</div>
            <div class="stat-label">Total Users</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="totalBooks">-</div>
            <div class="stat-label">Total Books</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="totalBorrows">-</div>
            <div class="stat-label">Total Borrows</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="activeBorrows">-</div>
            <div class="stat-label">Active Borrows</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="overdueBorrows">-</div>
            <div class="stat-label">Overdue Books</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="totalCategories">-</div>
            <div class="stat-label">Categories</div>
        </div>
    </div>

    <!-- Report Cards -->
    <div class="reports-grid">
        <div class="report-card">
            <div class="report-icon">üìä</div>
            <div class="report-title">Borrow Statistics</div>
            <div class="report-description">View detailed borrowing statistics and trends</div>
            <button class="report-button" onclick="loadBorrowStats()">View Report</button>
        </div>
        
        <div class="report-card">
            <div class="report-icon">üìö</div>
            <div class="report-title">Popular Books</div>
            <div class="report-description">See which books are most frequently borrowed</div>
            <button class="report-button" onclick="loadPopularBooks()">View Report</button>
        </div>
        
        <div class="report-card">
            <div class="report-icon">üë•</div>
            <div class="report-title">User Activity</div>
            <div class="report-description">Analyze user borrowing patterns and activity</div>
            <button class="report-button" onclick="loadUserActivity()">View Report</button>
        </div>
        
        <div class="report-card">
            <div class="report-icon">‚è∞</div>
            <div class="report-title">Overdue Books</div>
            <div class="report-description">Track and manage overdue book returns</div>
            <button class="report-button" onclick="loadOverdueBooks()">View Report</button>
        </div>
        
        <div class="report-card">
            <div class="report-icon">üìÖ</div>
            <div class="report-title">Date Range Report</div>
            <div class="report-description">Generate reports for specific date ranges</div>
            <button class="report-button" onclick="showDateRangeFilter()">View Report</button>
        </div>
        
        <div class="report-card">
            <div class="report-icon">üìà</div>
            <div class="report-title">System Overview</div>
            <div class="report-description">Complete system statistics and health</div>
            <button class="report-button" onclick="loadSystemOverview()">View Report</button>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="filters" id="dateRangeFilter" style="display: none;">
        <h3>Date Range Report</h3>
        <div class="filter-row">
            <div class="filter-group">
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate">
            </div>
            <div class="filter-group">
                <label for="endDate">End Date</label>
                <input type="date" id="endDate">
            </div>
            <div class="filter-group">
                <button class="btn btn-primary" onclick="loadDateRangeReport()">Generate Report</button>
            </div>
            <div class="filter-group">
                <button class="btn btn-secondary" onclick="hideDateRangeFilter()">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Report Content Area -->
    <div id="reportContent">
        <div class="chart-container">
            <div class="chart-title">Welcome to Reports Dashboard</div>
            <div class="chart-placeholder">
                Select a report above to view detailed analytics
            </div>
        </div>
    </div>
</div>

<script src="~/template/template.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        loadQuickStats();
    });

    async function loadQuickStats() {
        try {
            const [usersResponse, booksResponse, borrowsResponse, activeBorrowsResponse, overdueBorrowsResponse, categoriesResponse] = await Promise.all([
                ELibAPI.get('/api/v1/user/count'),
                ELibAPI.get('/api/v1/book/count'),
                ELibAPI.get('/api/v1/borrow/count'),
                ELibAPI.get('/api/v1/borrow/count/active'),
                ELibAPI.get('/api/v1/borrow/count/overdue'),
                ELibAPI.get('/api/v1/category/count')
            ]);

            if (usersResponse.success) document.getElementById('totalUsers').textContent = usersResponse.data;
            if (booksResponse.success) document.getElementById('totalBooks').textContent = booksResponse.data;
            if (borrowsResponse.success) document.getElementById('totalBorrows').textContent = borrowsResponse.data;
            if (activeBorrowsResponse.success) document.getElementById('activeBorrows').textContent = activeBorrowsResponse.data;
            if (overdueBorrowsResponse.success) document.getElementById('overdueBorrows').textContent = overdueBorrowsResponse.data;
            if (categoriesResponse.success) document.getElementById('totalCategories').textContent = categoriesResponse.data;
        } catch (error) {
            console.error('Error loading quick stats:', error);
            showError('Failed to load statistics');
        }
    }

    async function loadBorrowStats() {
        try {
            showLoading('Loading borrow statistics...');
            
            const [allBorrowsResponse, activeBorrowsResponse, overdueBorrowsResponse] = await Promise.all([
                ELibAPI.get('/api/v1/borrow/all?page=1&limit=1000'),
                ELibAPI.get('/api/v1/borrow/status/Borrowed?page=1&limit=1000'),
                ELibAPI.get('/api/v1/borrow/overdue')
            ]);

            let content = '<div class="chart-container">';
            content += '<div class="chart-title">Borrow Statistics</div>';
            
            if (allBorrowsResponse.success) {
                const allBorrows = allBorrowsResponse.data;
                const activeBorrows = activeBorrowsResponse.success ? activeBorrowsResponse.data : [];
                const overdueBorrows = overdueBorrowsResponse.success ? overdueBorrowsResponse.data : [];
                
                content += '<div class="stats-grid">';
                content += `<div class="stat-card"><div class="stat-number">${allBorrows.length}</div><div class="stat-label">Total Borrows</div></div>`;
                content += `<div class="stat-card"><div class="stat-number">${activeBorrows.length}</div><div class="stat-label">Active Borrows</div></div>`;
                content += `<div class="stat-card"><div class="stat-number">${overdueBorrows.length}</div><div class="stat-label">Overdue Books</div></div>`;
                content += `<div class="stat-card"><div class="stat-number">${allBorrows.length - activeBorrows.length}</div><div class="stat-label">Returned Books</div></div>`;
                content += '</div>';
                
                // Recent borrows table
                content += '<table class="data-table">';
                content += '<thead><tr><th>User</th><th>Book</th><th>Borrow Date</th><th>Due Date</th><th>Status</th></tr></thead>';
                content += '<tbody>';
                
                allBorrows.slice(0, 10).forEach(borrow => {
                    const isOverdue = borrow.status === 'Borrowed' && new Date(borrow.dueDate) < new Date();
                    const statusClass = isOverdue ? 'status-overdue' : `status-${borrow.status.toLowerCase()}`;
                    const statusText = isOverdue ? 'Overdue' : borrow.status;
                    
                    content += `<tr>
                        <td>${borrow.user?.username || 'Unknown'}</td>
                        <td>${borrow.book?.title || 'Unknown'}</td>
                        <td>${new Date(borrow.borrowDate).toLocaleDateString()}</td>
                        <td class="${isOverdue ? 'overdue' : ''}">${new Date(borrow.dueDate).toLocaleDateString()}</td>
                        <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                    </tr>`;
                });
                
                content += '</tbody></table>';
            }
            
            content += '</div>';
            document.getElementById('reportContent').innerHTML = content;
        } catch (error) {
            console.error('Error loading borrow stats:', error);
            showError('Failed to load borrow statistics');
        }
    }

    async function loadPopularBooks() {
        try {
            showLoading('Loading popular books...');
            
            const response = await ELibAPI.get('/api/v1/book?page=1&limit=1000');
            
            if (response.success) {
                const books = response.data;
                
                // Sort by some criteria (in real app, this would be based on borrow count)
                const popularBooks = books.sort((a, b) => b.createdAt.localeCompare(a.createdAt)).slice(0, 10);
                
                let content = '<div class="chart-container">';
                content += '<div class="chart-title">Popular Books</div>';
                content += '<table class="data-table">';
                content += '<thead><tr><th>Rank</th><th>Title</th><th>Author</th><th>Category</th><th>Published</th><th>Status</th></tr></thead>';
                content += '<tbody>';
                
                popularBooks.forEach((book, index) => {
                    content += `<tr>
                        <td>${index + 1}</td>
                        <td>${book.title}</td>
                        <td>${Array.isArray(book.authors) ? book.authors.join(', ') : book.authors || '-'}</td>
                        <td>${Array.isArray(book.categories) ? book.categories.join(', ') : book.categories || '-'}</td>
                        <td>${book.publishYear || '-'}</td>
                        <td><span class="status-badge ${book.isAvailable ? 'status-returned' : 'status-borrowed'}">${book.isAvailable ? 'Available' : 'Borrowed'}</span></td>
                    </tr>`;
                });
                
                content += '</tbody></table>';
                content += '</div>';
                document.getElementById('reportContent').innerHTML = content;
            }
        } catch (error) {
            console.error('Error loading popular books:', error);
            showError('Failed to load popular books');
        }
    }

    async function loadUserActivity() {
        try {
            showLoading('Loading user activity...');
            
            const response = await ELibAPI.get('/api/v1/user?page=1&limit=1000');
            
            if (response.success) {
                const users = response.data;
                
                let content = '<div class="chart-container">';
                content += '<div class="chart-title">User Activity Report</div>';
                content += '<table class="data-table">';
                content += '<thead><tr><th>Username</th><th>Full Name</th><th>Email</th><th>Role</th><th>Status</th><th>Joined</th></tr></thead>';
                content += '<tbody>';
                
                users.forEach(user => {
                    content += `<tr>
                        <td>${user.username}</td>
                        <td>${user.fullName || '-'}</td>
                        <td>${user.email}</td>
                        <td>${user.role}</td>
                        <td><span class="status-badge ${user.isActive ? 'status-returned' : 'status-borrowed'}">${user.isActive ? 'Active' : 'Inactive'}</span></td>
                        <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                    </tr>`;
                });
                
                content += '</tbody></table>';
                content += '</div>';
                document.getElementById('reportContent').innerHTML = content;
            }
        } catch (error) {
            console.error('Error loading user activity:', error);
            showError('Failed to load user activity');
        }
    }

    async function loadOverdueBooks() {
        try {
            showLoading('Loading overdue books...');
            
            const response = await ELibAPI.get('/api/v1/borrow/overdue');
            
            if (response.success) {
                const overdueBorrows = response.data;
                
                let content = '<div class="chart-container">';
                content += '<div class="chart-title">Overdue Books Report</div>';
                
                if (overdueBorrows.length === 0) {
                    content += '<div class="chart-placeholder">No overdue books found! üéâ</div>';
                } else {
                    content += '<table class="data-table">';
                    content += '<thead><tr><th>User</th><th>Book</th><th>Borrow Date</th><th>Due Date</th><th>Days Overdue</th><th>Actions</th></tr></thead>';
                    content += '<tbody>';
                    
                    overdueBorrows.forEach(borrow => {
                        const daysOverdue = Math.ceil((new Date() - new Date(borrow.dueDate)) / (1000 * 60 * 60 * 24));
                        
                        content += `<tr>
                            <td>${borrow.user?.username || 'Unknown'}</td>
                            <td>${borrow.book?.title || 'Unknown'}</td>
                            <td>${new Date(borrow.borrowDate).toLocaleDateString()}</td>
                            <td class="overdue">${new Date(borrow.dueDate).toLocaleDateString()}</td>
                            <td class="overdue">${daysOverdue} days</td>
                            <td><button class="btn btn-primary" onclick="returnBook('${borrow.id}')">Return</button></td>
                        </tr>`;
                    });
                    
                    content += '</tbody></table>';
                }
                
                content += '</div>';
                document.getElementById('reportContent').innerHTML = content;
            }
        } catch (error) {
            console.error('Error loading overdue books:', error);
            showError('Failed to load overdue books');
        }
    }

    function showDateRangeFilter() {
        document.getElementById('dateRangeFilter').style.display = 'block';
    }

    function hideDateRangeFilter() {
        document.getElementById('dateRangeFilter').style.display = 'none';
    }

    async function loadDateRangeReport() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        if (!startDate || !endDate) {
            showError('Please select both start and end dates');
            return;
        }
        
        try {
            showLoading('Generating date range report...');
            
            const response = await ELibAPI.get(`/api/v1/borrow/date-range?startDate=${startDate}&endDate=${endDate}`);
            
            if (response.success) {
                const borrows = response.data;
                
                let content = '<div class="chart-container">';
                content += `<div class="chart-title">Borrows Report (${startDate} to ${endDate})</div>`;
                content += `<div class="stat-card" style="margin-bottom: 20px;"><div class="stat-number">${borrows.length}</div><div class="stat-label">Total Borrows in Period</div></div>`;
                
                if (borrows.length > 0) {
                    content += '<table class="data-table">';
                    content += '<thead><tr><th>User</th><th>Book</th><th>Borrow Date</th><th>Due Date</th><th>Status</th></tr></thead>';
                    content += '<tbody>';
                    
                    borrows.forEach(borrow => {
                        const isOverdue = borrow.status === 'Borrowed' && new Date(borrow.dueDate) < new Date();
                        const statusClass = isOverdue ? 'status-overdue' : `status-${borrow.status.toLowerCase()}`;
                        const statusText = isOverdue ? 'Overdue' : borrow.status;
                        
                        content += `<tr>
                            <td>${borrow.user?.username || 'Unknown'}</td>
                            <td>${borrow.book?.title || 'Unknown'}</td>
                            <td>${new Date(borrow.borrowDate).toLocaleDateString()}</td>
                            <td class="${isOverdue ? 'overdue' : ''}">${new Date(borrow.dueDate).toLocaleDateString()}</td>
                            <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                        </tr>`;
                    });
                    
                    content += '</tbody></table>';
                } else {
                    content += '<div class="chart-placeholder">No borrows found in the selected date range</div>';
                }
                
                content += '</div>';
                document.getElementById('reportContent').innerHTML = content;
                hideDateRangeFilter();
            }
        } catch (error) {
            console.error('Error loading date range report:', error);
            showError('Failed to generate date range report');
        }
    }

    async function loadSystemOverview() {
        try {
            showLoading('Loading system overview...');
            
            const [usersResponse, booksResponse, categoriesResponse, authorsResponse, borrowsResponse] = await Promise.all([
                ELibAPI.get('/api/v1/user?page=1&limit=1000'),
                ELibAPI.get('/api/v1/book?page=1&limit=1000'),
                ELibAPI.get('/api/v1/category?page=1&limit=1000'),
                ELibAPI.get('/api/v1/author?page=1&limit=1000'),
                ELibAPI.get('/api/v1/borrow/all?page=1&limit=1000')
            ]);

            let content = '<div class="chart-container">';
            content += '<div class="chart-title">System Overview</div>';
            
            content += '<div class="stats-grid">';
            if (usersResponse.success) {
                const activeUsers = usersResponse.data.filter(u => u.isActive).length;
                content += `<div class="stat-card"><div class="stat-number">${usersResponse.data.length}</div><div class="stat-label">Total Users (${activeUsers} active)</div></div>`;
            }
            if (booksResponse.success) {
                const availableBooks = booksResponse.data.filter(b => b.isAvailable).length;
                content += `<div class="stat-card"><div class="stat-number">${booksResponse.data.length}</div><div class="stat-label">Total Books (${availableBooks} available)</div></div>`;
            }
            if (categoriesResponse.success) {
                content += `<div class="stat-card"><div class="stat-number">${categoriesResponse.data.length}</div><div class="stat-label">Categories</div></div>`;
            }
            if (authorsResponse.success) {
                content += `<div class="stat-card"><div class="stat-number">${authorsResponse.data.length}</div><div class="stat-label">Authors</div></div>`;
            }
            if (borrowsResponse.success) {
                const activeBorrows = borrowsResponse.data.filter(b => b.status === 'Borrowed').length;
                content += `<div class="stat-card"><div class="stat-number">${borrowsResponse.data.length}</div><div class="stat-label">Total Borrows (${activeBorrows} active)</div></div>`;
            }
            content += '</div>';
            
            content += '</div>';
            document.getElementById('reportContent').innerHTML = content;
        } catch (error) {
            console.error('Error loading system overview:', error);
            showError('Failed to load system overview');
        }
    }

    async function returnBook(borrowId) {
        if (!confirm('Are you sure you want to return this book?')) return;
        
        try {
            const response = await ELibAPI.post('/api/v1/borrow/return', { borrowId: borrowId });
            if (response.success) {
                showSuccess('Book returned successfully!');
                loadOverdueBooks(); // Refresh the report
            } else {
                showError('Failed to return book: ' + response.message);
            }
        } catch (error) {
            showError('Error returning book: ' + error.message);
        }
    }

    function showLoading(message) {
        document.getElementById('reportContent').innerHTML = `
            <div class="chart-container">
                <div class="chart-title">${message}</div>
                <div class="loading">${message}</div>
            </div>
        `;
    }

    function showError(message) {
        const errorContainer = document.getElementById('error-container');
        errorContainer.innerHTML = `<div class="error">${message}</div>`;
    }

    function showSuccess(message) {
        const errorContainer = document.getElementById('error-container');
        errorContainer.innerHTML = `<div class="alert alert-success">${message}</div>`;
        setTimeout(() => {
            errorContainer.innerHTML = '';
        }, 3000);
    }
</script>


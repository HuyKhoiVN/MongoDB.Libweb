@{
    ViewData["Title"] = "Search Books";
    Layout = "~/Views/Library/_LibraryLayout.cshtml";
}

<style>
        .search-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .search-header {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        .search-title {
            font-size: 2em;
            margin-bottom: 20px;
            color: #333;
        }
        .search-form {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .search-input {
            flex: 1;
            min-width: 300px;
            padding: 12px 16px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }
        .search-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }
        .search-filters {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .filter-select {
            padding: 10px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }
        .btn-search {
            background: var(--primary-color);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .btn-search:hover {
            background: #e55a00;
            transform: translateY(-2px);
        }
        .search-results {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }
        .results-count {
            color: #666;
            font-size: 1.1em;
        }
        .sort-options {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .sort-select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }
        .books-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        .book-card {
            background: #f8f9fa;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        }
        .book-cover {
            width: 100%;
            height: 200px;
            background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
            color: #999;
        }
        .book-info {
            padding: 20px;
        }
        .book-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
            line-height: 1.3;
        }
        .book-author {
            color: #666;
            margin-bottom: 8px;
        }
        .book-year {
            color: #999;
            font-size: 0.9em;
            margin-bottom: 15px;
        }
        .book-actions {
            display: flex;
            gap: 10px;
        }
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        .btn-primary {
            background: var(--primary-color);
            color: white;
        }
        .btn-primary:hover {
            background: #e55a00;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #5a6268;
        }
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .loading {
            text-align: center;
            padding: 50px;
            color: #666;
        }
        .error {
            background: #ffebee;
            color: #c62828;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 40px;
        }
        .pagination button {
            padding: 10px 15px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 6px;
            transition: all 0.3s;
        }
        .pagination button:hover:not(:disabled) {
            background: var(--primary-color);
            color: white;
        }
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .no-results {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        .no-results h3 {
            font-size: 1.5em;
            margin-bottom: 15px;
        }
        .no-results p {
            font-size: 1.1em;
            margin-bottom: 20px;
        }
        .btn-clear {
            background: #6c757d;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        .btn-clear:hover {
            background: #5a6268;
        }
    </style>

<div class="search-container">
        <div class="search-header">
            <h1 class="search-title">Search Books</h1>
            <div class="search-form">
                <input type="text" class="search-input" id="search-input" placeholder="Search for books, authors, or topics...">
                <div class="search-filters">
                    <select class="filter-select" id="category-filter">
                        <option value="">All Categories</option>
                    </select>
                    <select class="filter-select" id="author-filter">
                        <option value="">All Authors</option>
                    </select>
                    <select class="filter-select" id="year-filter">
                        <option value="">All Years</option>
                    </select>
                </div>
                <button class="btn-search" onclick="performSearch()">Search</button>
                <button class="btn-clear" onclick="clearFilters()">Clear</button>
            </div>
        </div>

        <div id="error-container"></div>

        <div class="search-results" id="search-results" style="display: none;">
            <div class="results-header">
                <div class="results-count" id="results-count">0 results found</div>
                <div class="sort-options">
                    <label for="sort-select">Sort by:</label>
                    <select class="sort-select" id="sort-select" onchange="performSearch()">
                        <option value="relevance">Relevance</option>
                        <option value="title">Title A-Z</option>
                        <option value="year">Year (Newest)</option>
                        <option value="author">Author A-Z</option>
                    </select>
                </div>
            </div>
            
            <div id="books-loading" class="loading">Searching books...</div>
            <div class="books-grid" id="books-grid" style="display: none;"></div>
            
            <div class="pagination" id="pagination" style="display: none;">
                <button id="prev-page" onclick="changePage(-1)">Previous</button>
                <span id="page-info">Page 1 of 1</span>
                <button id="next-page" onclick="changePage(1)">Next</button>
            </div>
        </div>

        <div id="no-results" class="no-results" style="display: none;">
            <h3>No books found</h3>
            <p>Try adjusting your search criteria or browse our categories.</p>
            <button class="btn btn-primary" onclick="clearFilters()">Clear Filters</button>
        </div>

    <script src="~/template/template.js"></script>
    <script>
        let currentPage = 1;
        let currentLimit = 12;
        let totalPages = 1;
        let currentQuery = '';

        document.addEventListener('DOMContentLoaded', function() {
            loadFilters();
            
            // Check if there are URL parameters for search
            const urlParams = new URLSearchParams(window.location.search);
            const query = urlParams.get('q');
            const category = urlParams.get('category');
            const author = urlParams.get('author');
            const year = urlParams.get('year');
            
            if (query) {
                document.getElementById('search-input').value = query;
                document.getElementById('category-filter').value = category || '';
                document.getElementById('author-filter').value = author || '';
                document.getElementById('year-filter').value = year || '';
                performSearch();
            }
        });

        async function loadFilters() {
            try {
                // Load categories
                const categoriesResponse = await ELibAPI.get(ELibAPI.endpoints.category.getAll());
                if (categoriesResponse.success) {
                    const categorySelect = document.getElementById('category-filter');
                    categoriesResponse.data.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }

                // Load authors
                const authorsResponse = await ELibAPI.get(ELibAPI.endpoints.author.getAll());
                if (authorsResponse.success) {
                    const authorSelect = document.getElementById('author-filter');
                    authorsResponse.data.forEach(author => {
                        const option = document.createElement('option');
                        option.value = author.id;
                        option.textContent = author.name;
                        authorSelect.appendChild(option);
                    });
                }

                // Load years (generate last 20 years)
                const yearSelect = document.getElementById('year-filter');
                const currentYear = new Date().getFullYear();
                for (let year = currentYear; year >= currentYear - 20; year--) {
                    const option = document.createElement('option');
                    option.value = year;
                    option.textContent = year;
                    yearSelect.appendChild(option);
                }

            } catch (error) {
                console.error('Error loading filters:', error);
            }
        }

        async function performSearch() {
            try {
                const query = document.getElementById('search-input').value;
                const category = document.getElementById('category-filter').value;
                const author = document.getElementById('author-filter').value;
                const year = document.getElementById('year-filter').value;
                const sort = document.getElementById('sort-select').value;
                
                currentQuery = query;
                currentPage = 1;
                
                // Show search results container
                document.getElementById('search-results').style.display = 'block';
                document.getElementById('no-results').style.display = 'none';
                
                // Show loading
                document.getElementById('books-loading').style.display = 'block';
                document.getElementById('books-grid').style.display = 'none';
                document.getElementById('pagination').style.display = 'none';

                // Build search data
                const searchData = {
                    searchQuery: query,
                    categories: category ? [category] : null,
                    authors: author ? [author] : null,
                    minYear: year ? parseInt(year) : null,
                    maxYear: year ? parseInt(year) : null,
                    page: currentPage,
                    limit: currentLimit,
                    sortBy: sort
                };

                const response = await ELibAPI.post(ELibAPI.endpoints.book.search, searchData);
                
                if (response.success) {
                    displayBooks(response.data);
                    updateResultsCount(response.data.length);
                    updatePagination();
                } else {
                    showError('Search failed: ' + response.error);
                }

            } catch (error) {
                console.error('Error searching books:', error);
                showError('Search failed: ' + error.message);
            } finally {
                document.getElementById('books-loading').style.display = 'none';
                document.getElementById('books-grid').style.display = 'grid';
                document.getElementById('pagination').style.display = 'flex';
            }
        }

        function displayBooks(books) {
            const container = document.getElementById('books-grid');
            container.innerHTML = '';

            if (!books || books.length === 0) {
                document.getElementById('search-results').style.display = 'none';
                document.getElementById('no-results').style.display = 'block';
                return;
            }

            books.forEach(book => {
                const bookCard = document.createElement('div');
                bookCard.className = 'book-card';
                bookCard.innerHTML = `
                    <div class="book-cover">📚</div>
                    <div class="book-info">
                        <div class="book-title" title="${book.title}">${book.title}</div>
                        <div class="book-author">${Array.isArray(book.authors) ? book.authors.join(', ') : book.authors || 'Unknown Author'}</div>
                        <div class="book-year">${book.publishYear || 'Unknown Year'}</div>
                        <div class="book-actions">
                            <button class="btn btn-secondary" onclick="viewBook('${book.id}')">View Details</button>
                            <button class="btn btn-primary" onclick="borrowBook('${book.id}')" ${!book.isAvailable ? 'disabled' : ''}>
                                ${book.isAvailable ? 'Borrow' : 'Unavailable'}
                            </button>
                        </div>
                    </div>
                `;
                container.appendChild(bookCard);
            });
        }

        function updateResultsCount(count) {
            document.getElementById('results-count').textContent = `${count} results found`;
        }

        function updatePagination() {
            // This would be calculated based on total count from API
            totalPages = Math.max(1, Math.ceil(100 / currentLimit)); // Assuming 100 total books
            
            document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;
            document.getElementById('prev-page').disabled = currentPage <= 1;
            document.getElementById('next-page').disabled = currentPage >= totalPages;
        }

        function changePage(direction) {
            const newPage = currentPage + direction;
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                performSearch();
            }
        }

        function clearFilters() {
            document.getElementById('search-input').value = '';
            document.getElementById('category-filter').value = '';
            document.getElementById('author-filter').value = '';
            document.getElementById('year-filter').value = '';
            document.getElementById('sort-select').value = 'relevance';
            
            document.getElementById('search-results').style.display = 'none';
            document.getElementById('no-results').style.display = 'none';
        }

        function viewBook(bookId) {
            window.location.href = `/Library/BookDetails/${bookId}`;
        }

        async function borrowBook(bookId) {
            // Check if user is logged in
            const userId = ELibAPI.getUserId();
            if (!userId) {
                alert('Please login to borrow books');
                window.location.href = '/Library/Login';
                return;
            }

            if (!confirm('Are you sure you want to borrow this book?')) {
                return;
            }

            try {
                const borrowData = {
                    userId: userId,
                    bookId: bookId,
                    dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString() // 14 days from now
                };

                const response = await ELibAPI.post(ELibAPI.endpoints.borrow.borrow, borrowData);
                if (response.success) {
                    alert('Book borrowed successfully!');
                    performSearch(); // Refresh search results
                } else {
                    showError('Failed to borrow book: ' + response.error);
                }
            } catch (error) {
                console.error('Error borrowing book:', error);
                showError('Failed to borrow book: ' + error.message);
            }
        }

        function showError(message) {
            const errorContainer = document.getElementById('error-container');
            errorContainer.innerHTML = `<div class="error">${message}</div>`;
        }
    </script>
